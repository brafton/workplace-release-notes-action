const core = require('@actions/core');
const github = require('@actions/github');
const request = require('request');
const nodemailer = require("nodemailer");

var githubToken = "";
var repoName = "";
var emailPassword = "";
var emailUsername = "";
var emailRecipient = "";

/**
 * main
 */
async function main() {

  // 2. do http request to github to get release note generated by probot
  var response = await get_release_note(githubToken, repoName);

  var release_note;
  var is_draft;
  var subject;
  var prettyName = to_title_case(repoName);

  if (!!response == true && Array.isArray(response) == true) {
      release_note = response[0];
  }
  else if (!!response == true && Array.isArray(response) == false) {
      release_note = response;
  }

  is_draft = (!!release_note == true && release_note.draft == true);
  subject = is_draft == true ? `${prettyName} Staging Release ${release_note.tag_name}` : `${prettyName} Production Release ${release_note.tag_name}`;

  // 3. send the email
  await send_email(emailPassword, emailUsername, emailRecipient, subject, release_note.body_html)
}

/**
* send the email
* @param email_creds the smtp credential password
* @param subject 
* @param body_html the release note html to be sent
*/
async function send_email(email_password, email_username, email_recipient, subject, body_html) {
  // 1. create reusable transporter object using the default SMTP transport
  var transporter = nodemailer.createTransport({
      host: "smtp.gmail.com",
      port: 587,
      secure: false, // true for 465, false for other ports
      auth: {
          user: email_username,
          pass: email_password
      }
  });

  var payload = `<h2>${subject}</h2> ${body_html}`

  // 2. send mail with defined transport object
  var info = await transporter.sendMail({
      from: email_username, // sender address
      to: email_recipient, // list of receivers
      cc: email_username,
      subject: subject, // Subject line
      html: payload //html body
  });
}

/**
* fetch release note via github api
* @param github_releases_token github Basic Authentication i.e. Basic username:password
* @param repo_name the name of the repo for which to get latest release note
*/
async function get_release_note(github_releases_token, repo_name) {


  var options = {
      url: `https://api.github.com/repos/brafton/${repo_name}/releases`,
      headers: {
          'Authorization': `Bearer ${github_releases_token}`,
          'User-Agent': `${repo_name}`,
          // this ensure that the body of the response payload is html
          'Accept': 'application/vnd.github.v3.html+json' 
      },
  };

  var response = await new Promise(function (resolve, reject) {
      request.get(options, function (error, response, body) {
          if (error)
              reject(error);
          else
              resolve(JSON.parse(body));
      });
  });

  return response;

}

function to_title_case(text) {
  var splitText = text.replace('-', ' ').replace('_', ' ');
  var arrayText = splitText.split(' ');
  var arrayTextToTitleCase = arrayText.map(x => x.charAt(0).toUpperCase() + x.substring(1));
  var prettyText = arrayTextToTitleCase.join(' ');
  return prettyText;
}


try {
  // pickup input parameters
  githubToken = core.getInput('github_token');
  repoName = core.getInput('repo_name');
  emailPassword = core.getInput('email_password');
  emailUsername = core.getInput('email_username');
  emailRecipient = core.getInput('email_recipient');

  console.log(`Hello reponame=${repoName} token=${githubToken} username=${emailUsername} password=${emailPassword}`);

  // Get the JSON webhook payload for the event that triggered the workflow
  const payload = JSON.stringify(github.context.payload, undefined, 2)
  console.log(`The event payload: ${payload}`);

  // call the main function and do the work
  main();


} catch (error) {
  core.setFailed(error.message);
}
